name: Build

run-name: Build

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

on: [push]

jobs:
  build-bssl:
    runs-on: ubuntu-latest

    steps:
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '12'

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.24.x'

      - name: Try cmake
        run: cmake --version

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.11.1

      - name: Try ninja
        run: ninja --version

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.0' # The Go version to download (if necessary) and use.

      - name: Try go
        run: go version

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v3
        with:
          repository: 'google/boringssl'
          path: 'boringssl'

      - name: Mkdir
        run: mkdir ${{github.workspace}}/boringssl/build

      - name: CMake bssl
        working-directory: ${{github.workspace}}/boringssl/build
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_C_COMPILER=${{ env.LLVM_PATH }}/bin/clang -DCMAKE_CXX_COMPILER=${{ env.LLVM_PATH }}/bin/clang++ -DCMAKE_LINKER=${{ env.LLVM_PATH }}/bin/llvm-ld -DASAN=OFF -GNinja ..

      - name: Build bssl
        working-directory: ${{github.workspace}}/boringssl/build
        # Build your program with the given configuration
        run: ninja -v

      # - name: Test bssl
      #   env:
      #     ASAN_OPTIONS: "detect_leaks=1"
      #   working-directory: ${{github.workspace}}/boringssl
      #   # Execute tests defined by the CMake configuration.
      #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #   run: ninja -C build run_tests

      - uses: actions/upload-artifact@v3
        with:
          name: bssl-libs
          path: |
            ${{ github.workspace }}/boringssl/build/crypto/libcrypto.a
            ${{ github.workspace }}/boringssl/build/ssl/libssl.a
          if-no-files-found: error

  build-nginx:
    needs: build-bssl
    runs-on: ubuntu-latest

    steps:
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcre2-dev libpcre3-dev zlib1g-dev libasan6 libio-socket-ssl-perl

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '12'

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.24.x'

      - name: Try cmake
        run: cmake --version

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.11.1

      - name: Try ninja
        run: ninja --version

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.0' # The Go version to download (if necessary) and use.

      - name: Try go
        run: go version

      - uses: actions/checkout@v3
        with:
          repository: 'google/boringssl'
          path: 'boringssl'

      - name: Mkdir
        run: |
          mkdir -p ${{github.workspace}}/boringssl/build/crypto
          mkdir -p ${{github.workspace}}/boringssl/build/ssl

      - uses: actions/download-artifact@v3
        with:
          name: bssl-libs

      - name: Move libs
        run: |
          ls -al
          mv crypto/libcrypto.a ${{github.workspace}}/boringssl/build/crypto/
          mv ssl/libssl.a ${{github.workspace}}/boringssl/build/ssl/

      - uses: actions/checkout@v3
        with:
          path: 'nginx-boringssl-fingerprint'

      - uses: actions/checkout@v3
        with:
          repository: 'cloudflare/zlib'
          path: 'zlib'

      - name: Configure zlib
        working-directory: ${{github.workspace}}/zlib
        run: ./configure

      - name: Download nginx tarball
        run: wget https://nginx.org/download/nginx-1.23.2.tar.gz

      - name: Uncompress nginx tarball
        run: tar xf nginx-1.23.2.tar.gz

      - uses: actions/checkout@v3
        with:
          repository: 'nginx/nginx-tests'
          path: 'nginx-tests'

      - name: List dir
        # Build your program with the given configuration
        run: ls -al

      #- name: Patch
      #  run: patch -p1 -d nginx-1.23.2 < nginx-boringssl-fingerprint/patches/ngx_ssl_preread.patch

      - name: Configure nginx
        env:
          CC: ${{ env.LLVM_PATH }}/bin/clang
          LD: ${{ env.LLVM_PATH }}/bin/clang
          LINK: ${{ env.LLVM_PATH }}/bin/clang
        working-directory: ${{github.workspace}}/nginx-1.23.2
        run: ./configure --with-zlib=$(pwd)/../zlib --with-openssl-opt=enable-tls1_3 --with-http_realip_module --with-http_ssl_module --with-http_v2_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-debug --with-cc-opt="-I../boringssl/include -DNGX_DEBUG_PALLOC=1 -fPIC -fsanitize=address -fsanitize-recover=address -fsanitize-address-use-after-scope -fno-stack-protector -fno-omit-frame-pointer" --with-ld-opt="-L../boringssl/build/ssl -L../boringssl/build/crypto -fPIC -fsanitize=address -lrt -lssl -lcrypto"

      - name: Make nginx
        env:
          CC: ${{ env.LLVM_PATH }}/bin/clang
          LD: ${{ env.LLVM_PATH }}/bin/clang
          LINK: ${{ env.LLVM_PATH }}/bin/clang
        working-directory: ${{github.workspace}}/nginx-1.23.2
        run: make

      - name: Test nginx
        env:
          TEST_NGINX_BINARY: ${{github.workspace}}/nginx-1.23.2/objs/nginx
          ASAN_OPTIONS: "detect_leaks=0:symbolize=1:halt_on_error=0"
          #ASAN_SYMBOLIZER_PATH: ${{ env.LLVM_PATH }}/bin/llvm-symbolizer
        working-directory: ${{github.workspace}}/nginx-tests
        run: prove .
